if(WIN32 AND NOT ARA_SDK_VISUAL_STUDIO_SETTINGS_SET)

    include (find_avx)
    if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" AND "x${CMAKE_CXX_SIMULATE_ID}" STREQUAL "xMSVC")
        set(CLANGCL ON)
        add_compile_definitions(_CRT_SECURE_NO_WARNINGS )
        string(APPEND CMAKE_C_FLAGS " -Wno-pragma-pack -Wno-deprecated-declarations")
        string(APPEND CMAKE_CXX_FLAGS " -Wno-pragma-pack -Wno-deprecated-declarations")
       # message("using clang-cl settings")
    endif()

    if(CMAKE_SIZEOF_VOID_P EQUAL 4)
        set(ARCH_POSTFIX "")
        set(LIB_ARCH_PATH "Win32")
    else()
        set(ARCH_POSTFIX 64)
        set(LIB_ARCH_PATH "x64")
    endif()

    if(MSVC AND NOT CLANGCL)
        if(${CMAKE_BUILD_TYPE} MATCHES Debug)
            set(CMAKE_SHARED_LINKER_FLAGS "/machine:${LIB_ARCH_PATH} /ASSEMBLYDEBUG /NODEFAULTLIB:\"msvcrt.lib\"")
        endif()
    endif()

    # enable parallel build on Visual Studio Projects
    if(CMAKE_GENERATOR MATCHES "Visual Studio" AND (CMAKE_C_COMPILER_ID MATCHES "MSVC|Intel" OR CMAKE_CXX_COMPILER_ID MATCHES "MSVC|Intel"))
      set(CMake_MSVC_PARALLEL ON CACHE STRING "Enables /MP flag for parallel builds using MSVC." )
      if(CMake_MSVC_PARALLEL)
        if(CMake_MSVC_PARALLEL GREATER 0)
          string(APPEND CMAKE_C_FLAGS " /MP${CMake_MSVC_PARALLEL}")
          string(APPEND CMAKE_CXX_FLAGS " /MP${CMake_MSVC_PARALLEL}")
        else()
          string(APPEND CMAKE_C_FLAGS " /MP")
          string(APPEND CMAKE_CXX_FLAGS " /MP")
        endif()
      endif()
      # avoid to have the binaries being built into Debug or Release folder when using visual studio
      set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )
      set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )
      set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} )
      # Second, for multi-config builds (e.m_g. msvc)
      foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
        string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
        set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_BINARY_DIR} )
        set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_BINARY_DIR} )
        set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_CURRENT_BINARY_DIR} )
      endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
    else()
      set(CMAKE_DEBUG_PREFIX "")
      set(CMAKE_RELEASE_PREFIX "")
    endif()

    # remove build type prefix on the binary for compilation visual studio
    set(CMAKE_DEBUG_POSTFIX "")
    set(CMAKE_RELEASE_POSTFIX "")

    if(NOT CLANGCL)
        CHECK_FOR_AVX()

        if (NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
            if(NOT ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4996 /wd4146 /wd26812 /wd4101 /EHsc") # /arch:AVX -> force glm to use AVX instructions
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4996 /wd4146 /wd26812 /wd4101 /EHsc")
            endif ()
        endif ()
    endif()

    # macro to organize files in visual studio
    macro(GroupSources curdir)
        file(GLOB children RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/${curdir} ${CMAKE_CURRENT_SOURCE_DIR}/${curdir}/*)
        foreach(child ${children})
            if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${curdir}/${child})
                GroupSources(${curdir}/${child})
            else()
                string(REPLACE "/" "\\" groupname ${curdir})
                # I would like to call the src root folder in a different name, only in visual studio (not mandatory requirement)
                # string(REPLACE "src" "Common" groupname ${groupname})
                source_group(${groupname} FILES ${CMAKE_CURRENT_SOURCE_DIR}/${curdir}/${child})
            endif()
        endforeach()
    endmacro()
    GroupSources(src)

    #set (ARA_SDK_VISUAL_STUDIO_SETTINGS_SET ON)
endif()