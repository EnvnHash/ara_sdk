{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16680\viewh13360\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl288\slmult1\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 GUI
\fs24 \
\
GUI Konventionen
\b0 \
	- Alle Positionen im GUI funktionieren mit pixel und Prozent Angaben \
	- abgesehen davon gibt es Positionierungsangaben in Symbolen (ALIGN_TOP, ALIGN_LEFT, etc\'85)\
	- Selbes Koordinatensystem wie OpenGl IdentMatrix, Mitte (0|0) Gr\'f6\'dfe (2|2)\
	- rechts oben ist 100% 100% (1.f | 1.f)\
	- links unten ist -100% -100% (-1.f | -1.f)\
	- standard Positionierung ist die Mitte, also 0|0\
	- setPosition (10, 10) heisst z.B. 10 pixel nach oben und nach rechts vom Ursprung aus\
	- wenn der Pivot-Point anders gesetzt wird, bezieht sich die Position auf den PivotPoint relativ zum Ursprung. \
	Bsp. Pivot_left und setPosition(10, 10) heisst das Objekt befindet sich mit der linken Kanten 10 Pixel rechts Ursprung und 10 Pixel nach oben\
	- wenn aligns gesetzt werden, bezieht sich der Offset auf die Align\
	- das GUI kann durch setzen mehrerer Viewports beliebig oft und an beliebigen Stellen gerendert werden.\
	Damit das funktioniert m\'fcssen alle Pixelwerte in relative Werte umgerechnet werden. \
	Ausschlaggebend f\'fcr diese Umrechnung ist der erste Viewport, der \'fcbergeben wird.\
	- Bei zeichnen der einzelnen Elemente wird der Viehport (relativ zum einem der root-viewports) so gesetzt, dass er genau\
	der Gr\'f6sse des Elements entspricht. Dadurch wird die Performance optimiert und die Objekte k\'f6nnen per Einheitsmatrix gezeichnet werden\

\b \
Window / Widget Hirachie
\b0 \
	- Der GWindowManager erstellt automatisch ein RootWidget f\'fcr jedes Fenster und setzt die CallbackFunktionen auf GWindowManger Methoden\
	- Beim Hinzuf\'fcgen eines Widgets zum RootWidget werden automatisch die CallbackFunktionen des Widgets gesammelt und beim Aufrufen des RootWidget Callbacks an das Widget weitergegeben\
	- wenn eine Action des Benutzers kommt l\'e4uft diese GWindowManager -> RootWidget -> Widget -> GUIObject -> \'85\
	- Das RootWidget speichert die Actions in einer Queue und per RootWidget->update werden diese bearbeitet, bzw. ausgef\'fchrt\
	- Die RootWidget->update method wird \'fcber mainloop Methode des GWindowManager aufgerufen\
\

\b Widget - Rendering
\b0 \
	- RootWidget wird beim Erstellen die Gr\'f6\'dfe des Screens zugewiesen, in dem es sich befindet (sollte sp\'e4ter auch \'fcber mehrere Screens gehen\'85)\
		- wenn mehrere screen muss viewport und scissor gesetzt werden\
		- die Widgets und GuiElemente enthalten nur Gr\'f6ssen und Positionen\
		- beim zeichnen werden diese Gr\'f6\'dfen und Position in Transformationsmatrizen umgewandelt. \
		- jedes Parent Widget \'fcbergibt seine Viewports dem Kindwidget, das kindwidget benutzt diese viewports mit normalisierten Koordinaten\
		- \'fcbergeben werden aber auch alle anderen Viewports der ParentObjekte, falls das GUI Element etwas \'fcber seine Grenzen hinaus Zeichen muss\
		- \
	- Die GuiObjekte k\'f6nnen alle Labels mit Text besitzen, dieser kann per border Einstellung innerhalb des GuiObjekte positioniert werden\
		- Beschreibung des Borders ist ein vec4 (li, re, oben, unten)\
\

\b Mouse-Interaktion
\b0 \
	- Die Zuordnung eines Mouse-Klicks zu einem GuiElement erfolgt \'fcber einen Geometrieshader. \
	Alle Gui-Elemente werden zweimal gerendert: einmal zur grafischen Darstellung und das andere Mal mit einer eindeutigen ID, die als Grauwert gerendert wird\
	- Die aktuelle Mausposition wird in einen VAO geschrieben, der danach gerendert wird. Per Geoshader wird dann ein Punkt emittiert, der den \
	Grauwert an der entsprechenden Stelle as x-Wert gespeichert hat. \
\
}