{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww20400\viewh14400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 GLSLParticleSystemFbo\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0\fs24 \cf0 Die grundlegende Idee ist es alle Partikeldaten in Texturen zu schreiben, da der Zugriff auf diese extrem schnell ist und entsprechende Format (16F, 32F) vorhanden sind. Position, Farbe, etc. werden in mehreren Attachments an einen PingPongFbo verwaltet. \
\
- Auf der Radeon 6490M k\'f6nnen max 8 Texturen gleichzeitig gebunden werden und max. 8 Attachments gleichzeitig an einen FBO angeh\'e4ngt werden. \
- Die Texturen werden als GL_TEXTURE_RECTANGLE initialisiert, GL_NEAREST, GL_CLAMP_TO_BORDER\
- Emittieren geht auf zwei Arten, per Daten (Partikel fuer Partikel) oder per Textur.\
- Die Texturen werden in gleichgro\'dfe Zellen organisiert. \
- Ausschlaggebend fuer die Gr\'f6\'dfe der Zellen ist die maximale Anzahl Punkte die per Vertice aus dem Geometry Shader emittiert werden k\'f6nnen (wegen dem Emittieren per Textur). Bsp. bei max. 50 ist die resultierende Zeltgr\'f6\'dfe 8 x 6 (=48) (das n\'e4chst kleinere ganzzahlige Vielfache von 2)\
- F\'fcr alle Bearbeitungsstufen wird eine globale EmitData Instanz verwendet, dieser befindet sich ausserhalb der Klasse\
- Bei Ver\'e4nderungen des EmitData Struct muss immer setEmitData() aufgerufen werden, damit die Uniform Blocks aktualisiert werden\
- EmitTexturen m\'fcssen weiss oder rot sein (Optimierung im Shader, es wird nur auf Rot und Alpha Kanal gepr\'fcft\
- Beim Editieren mit Tiefenwerten, sollten die Tiefenwerte im Rotkanal liegen und \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li570\fi-570\pardirnatural\partightenfactor0

\b \cf0 - Initialisierung:
\b0 \
	- Initialisiert wird das System mit einer maximalen Anzahl Partikel. Da diese Anzahl sich in einem mathematisch praktikablen Verh\'e4ltnis zur Gr\'f6\'dfe der Textur verhalten muss, wird diese nicht 1:1 \'fcbernommen sondern angepasst. Die reale Anzahl Partikel weicht also geringf\'fcgig ab. Es wird aber garantiert, das auf jeden Fall mehr als geforderte Partikel vorhanden sind\
	- Die Anzahl geforderter Partikel wird durch die Gr\'f6sse der Zellen geteilt. Bsp. bei einer Zellgr\'f6\'dfe von 8x6=48 (ergibt bei einem Offset Pixel 47 real nutzbare Speicherpl\'e4tze) und 100 000 geforderten Partikeln 100000 / 47 = 2127,65.. Diese Zahl wird zum n\'e4chst h\'f6heren Vielfachen von 2 aufgerundet, also 2128.\
	- Um die Breite und H\'f6he der Textur zur erhalten wird diese Zahl inkrementel durch Vielfache von 2 geteilt, bis das Ergebnis kleiner als der Teiler ist. Bsp. 2128 / 2 = 1064, 2128 / 4 = 532 \'85 2128 / 48 = 44,3.  Das Ergebnis wird immer aufgerundet. \
	Die resultierende Textur w\'fcrde also  48 x 45 x 47 Partikeln = 101520 Partikel enthalten.\
	Die Gr\'f6sse der Textur ist also (48 x 8) x (45 x 6) = 384 x 270 Pixel und enth\'e4lt 48 x 45 = 2160 Zellen (nrCells)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 - Update:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 	- Src des PingPongFbo wird gebunden, ein normalisiertes Quadrat gezeichnet \
	- im Fragment Shader, Pixel fuer Pixel gelesen und per Zeit modifiziert (update) und an dieselbe Stelle in den PingPongFbo Dst geschrieben\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 - Emittieren:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 	- Grundlegende Idee ist es GL_POINTs zu rendern, da diese immer genaue in einem Pixel resultieren\
	- Problem ist es, das immer die Mitte des Pixels als Position angegeben werden muss (Umwandlung normalisierte Koordinaten -> Pixelpositionen)\
	 hierzu muss ein Offset und eine Gesamtgr\'f6\'dfe anhand der Texturgr\'f6\'dfe berechnet werden\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 - Emittieren als Daten\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 	- Um Performance zu optimieren wird auf maximal viele Zellen parallel geschrieben \
	- Hierzu wird eine VAO mit Trigger-Punkten erstellt, die mit den gew\'fcnschten Werten initialisiert werden\
	- Die Positionen der Trigger-Punkte resultieren aus den aktuellen Schreibpositionen innerhalb der Zellen und dem aktuellen Zellenoffset\
	- Bsp. werden 1000 Partikel zum Emittieren (nrEmitPart) angefordert (bei der \'dcbergabe wird limitiert, dass nicht mehr Partikel angefordert werden, als vorhanden).\
	-  Es wird berechnet wie viele Partikel pro Zelle emittiert werden (nrEmitPartPerCell):\
	nrEmitPartPerCell = nrEmitPart / nrCells. (1000 / 2144 = 0,466\'85) Das Ergebnis wird aufgerundet (nrEmitPartPerCell=1). \
	- Dann wird berechnet wie viele Zellen ben\'f6tigt werden (nrEmitCells):\
	nrEmitCells = nrEmitPart / nrEmitPartPerCell (1000 / 1 = 1000). Das Ergebnis wird auf die n\'e4chste Ganzzahl abgerundet und die Nachkommastellen gespeichert.\
	(bap: 1000 / 3 = 333,333\'85  nrEmitCells = 333 Rest 0,333. Rest * nrEmitPartPerCell = 1 (aufgerundet). \
	Es wird also eine zus\'e4tzliche Zelle mit nur einem Partikel angefordert. Diese wird aber in einem zweiten Schritt initialisiert. \
	- Das CellOffset Buffer Objekt wird gemappt, die Offsets gelesen und in ein Array geschrieben\
	- Mit den gefundenen Werte wird das EmitVao von 0 ab beschrieben, wobei die Position dem Zellen-schreiboffset und den Offset innerhalb dieser Zelle entspricht.\
	- Das CellOffset Buffer Objekt wird gemappt und die neuen Offsets geschrieben.\
	- Der PingPongFbo wird gebunden und das EmitVao gezeichnet. \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 - Emittieren als Textur\
	
\b0 - Es sind zwei F\'e4lle zu unterscheiden:\
		- 1: (Emittextur gr\'f6\'dfer (breiter und oder h\'f6her) als die PartikelFbos: die Emittextur muss mit bilinearer Interpolation auf die Gr\'f6\'dfe des PartikelFbos skaliert werden.)\
			Emittextur gr\'f6\'dfer (breiter und oder h\'f6her) als die PartikelFbos: es wird ein EmitTriggerVao gebaut, dass die komplette Textur durchl\'e4uft\
		- 2: Emittextur kleiner als PartikelFbo: Es wird ein neuer EmitTexVao erstellt, der die Textur in Zellen der Gr\'f6\'dfe von max 8x6 (je nach Limit) Pixeln unterteilt\
		die Zuordnung zum PartikelFbo geschieht durch die Offsets \
	- Im GeoShader wird ausgehend vom EmitTexVao Vertice durch die Zelle geloopt und aus der Emittextur gelesen.\
	- Wenn die Helligkeit des Pixels der Emittextur an dieser Stellen einen Schwellenwert \'fcberschreitet wird ein Punkt emittiert\
	- Die emittierten Punkte werden per TFO aufgezeichnet. \
	- Die aufgezeichneten Punkte werden wieder gezeichnet und in die PartikelFbos geschrieben\
\
	- Die Schreib-Position wird durch einen TEXTURE_BUFFER definiert (basePTex.cellOffsTexBuf), der auf der Host-Seite mit einem Array gespiegelt wird\
	(basePTex.cellWriteOffs). Nach jedem Emittieren wird das Array auf der Host-Seite aktualisiert und das Array in den TextureBuffer hochgeladen.\
	- Die Offsets werden als Pixel Positionen geschrieben (ivec2)\
\
	- Im Shader wird anhand des CellPtr und der VertexID die Zelle bestimmt, in die geschrieben wird, anhand der Zelle wird aus dem basePTex.cellOffsTexBuf gelesen und die resultierenden Koordinaten in textur-koordinaten umgerechnet\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	- Bei jedem Punkt wird eine Zelle weitergesprungen, so dass die neue Schreibposition anhand der Anzahl geschriebener Partikel bestimmt werden kann.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 - Partikel als Quad zeichnen\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 	- hierzu wird ein einzelnes Quad mit Instanzen (so viele wie Partikel) gezeichnet und die entsprechenden Parameter wie Position, etc. aus dem gebundenen PartikelFbo gelesen}