# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake build on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-13
            c_compiler: cl
          - os: macos-13
            c_compiler: gcc
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Make dependencies installation script executable
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          chmod +x ./scripts/install_dependencies_linux.sh
        fi

    - name: install dependencies on ubuntu
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          ./scripts/install_dependencies_linux.sh
        fi

    - name: Make dependencies installation script executable (macos)
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          chmod +x ./scripts/install_dependencies_macos.sh
        fi

    - name: install dependencies on macos
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          ./scripts/install_dependencies_macos.sh
        fi

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: | 
        if [ "$RUNNER_OS" == "macOS" ] || [ "$RUNNER_OS" == "Linux" ]; then
          ./Libraries/Utilities/UnitTests/Utilities_UnitTests
        fi
